#!/usr/bin/env bash

# Create directory structure
mkdir -p hosts/{steam-deck,laptop}

# Function to create file with content
create_file() {
    mkdir -p "$(dirname "$1")"
    echo "$2" > "$1"
    echo "Created: $1"
}

# Create hosts/default.nix
create_file "hosts/default.nix" '{ config, pkgs, ... }: {
  # Basic hardware support
  hardware = {
    enableAllFirmware = true;
    bluetooth = {
      enable = true;
      powerOnBoot = true;
      settings = {
        General = {
          Enable = "Source,Sink,Media,Socket";
          Experimental = true;
        };
      };
    };
  };

  # Network management
  networking = {
    networkmanager = {
      enable = true;
      wifi.backend = "iwd"; # Modern WiFi backend
    };
  };

  # Basic services
  services = {
    # Bluetooth GUI
    blueman.enable = true;
    # Firmware updates
    fwupd.enable = true;
    # Power management
    power-profiles-daemon.enable = true;
    # Better than tlp for modern devices
    auto-cpufreq.enable = true;
  };

  # Common packages
  environment.systemPackages = with pkgs; [
    networkmanagerapplet
    bluez
    bluez-tools
    usbutils
    pciutils
  ];
}'

# Create Steam Deck configuration
create_file "hosts/steam-deck/default.nix" '{ config, pkgs, ... }: {
  imports = [
    ../default.nix
    ./hardware.nix
  ];

  # Steam Deck specific hardware support
  hardware = {
    steam-hardware.enable = true;
    
    # AMD graphics for Steam Deck
    opengl = {
      enable = true;
      driSupport = true;
      driSupport32Bit = true;
      extraPackages = with pkgs; [
        amdvlk
        rocm-opencl-icd
        rocm-opencl-runtime
      ];
    };
  };

  # Steam Deck controller support
  services.udev.extraRules = '''
    # Steam Deck Controller
    SUBSYSTEM=="input", ATTRS{name}=="*Steam Deck*", MODE="0666"
    KERNEL=="uinput", SUBSYSTEM=="misc", MODE="0660", GROUP="input"
  ''';

  # Steam Deck specific packages
  environment.systemPackages = with pkgs; [
    steam
    gamescope
    mangohud
  ];

  # Performance tweaks for gaming
  boot.kernelParams = [
    "amd_pstate=active"
    "processor.energy_perf_bias=performance"
  ];
}'

# Create laptop configuration
create_file "hosts/laptop/default.nix" '{ config, pkgs, ... }: {
  imports = [
    ../default.nix
    ./hardware.nix
  ];

  # Laptop specific services
  services = {
    # Thermal management
    thermald.enable = true;
    
    # Touchpad support
    libinput = {
      enable = true;
      touchpad = {
        tapping = true;
        naturalScrolling = true;
        scrollMethod = "twofinger";
        disableWhileTyping = true;
      };
    };
  };

  # Power management
  powerManagement = {
    enable = true;
    powertop.enable = true;
  };

  # Laptop specific packages
  environment.systemPackages = with pkgs; [
    brightnessctl
    acpi
    powertop
  ];
}'

# Create hardware configurations (placeholder - will be generated by nixos-generate-config)
create_file "hosts/steam-deck/hardware.nix" '{ config, lib, pkgs, modulesPath, ... }: {
  imports = [ 
    (modulesPath + "/installer/scan/not-detected.nix")
  ];
  
  # Add your Steam Deck specific hardware configuration here
}'

create_file "hosts/laptop/hardware.nix" '{ config, lib, pkgs, modulesPath, ... }: {
  imports = [ 
    (modulesPath + "/installer/scan/not-detected.nix")
  ];
  
  # Add your laptop specific hardware configuration here
}'

# Update flake.nix
create_file "flake.nix" '{
  description = "NixOS Configuration with multiple device profiles";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, home-manager, ... }:
    let
      system = "x86_64-linux";
      pkgs = nixpkgs.legacyPackages.${system};
    in {
      nixosConfigurations = {
        # Steam Deck configuration
        "steam-deck" = nixpkgs.lib.nixosSystem {
          inherit system;
          modules = [
            ./hosts/steam-deck
            home-manager.nixosModules.home-manager {
              home-manager.useGlobalPkgs = true;
              home-manager.useUserPackages = true;
              home-manager.users.cizen = import ./home;
            }
          ];
        };
        
        # Laptop configuration
        "laptop" = nixpkgs.lib.nixosSystem {
          inherit system;
          modules = [
            ./hosts/laptop
            home-manager.nixosModules.home-manager {
              home-manager.useGlobalPkgs = true;
              home-manager.useUserPackages = true;
              home-manager.users.cizen = import ./home;
            }
          ];
        };
      };
    };
}'

chmod +x setup-profiles.sh
echo "NixOS profiles structure has been created!"
echo "Note: Don't forget to generate proper hardware configurations using nixos-generate-config"